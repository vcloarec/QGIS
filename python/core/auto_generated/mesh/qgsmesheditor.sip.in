/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/mesh/qgsmesheditor.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/



class QgsMeshEditingError
{
%Docstring(signature="appended")
Class that represents an error during mesh editing
%End

%TypeHeaderCode
#include "qgsmesheditor.h"
%End
  public:

    enum MeshEditingErrorType
    {
      NoError,
      InvalidFace,
      FlatFace,
      UniqueSharedVertex,
      InvalidVertex
    };

    QgsMeshEditingError();
%Docstring
Contructor of the default error, that is NoError
%End

    QgsMeshEditingError( MeshEditingErrorType type, int elementIndex );
%Docstring
Constructor with eht error ``type`` and the index of the element ``elementIndex``
%End

    MeshEditingErrorType errorType;

    int elementIndex;

    bool operator==( const QgsMeshEditingError &other ) const;
    bool operator!=( const QgsMeshEditingError &other ) const;
};

class QgsMeshEditor : QObject
{
%Docstring(signature="appended")
Class that makes edit operation on a mesh
%End

%TypeHeaderCode
#include "qgsmesheditor.h"
%End
  public:

    QgsMeshEditor( QgsMeshLayer *meshLayer );
%Docstring
Contructor with a specified layer ``meshLayer``
%End


    QgsMeshEditingError initialize();
%Docstring
Initialize the mesh editor and return errors if the internal native mesh have topologic errors
%End

    QgsMeshEditingError addFace( const QVector<int> &vertexIndexes );
%Docstring
Adds a face ``face`` to the mesh with vertex indexes ``vertexIndexes``, returns topological errors if this operation fails (operation is not realized)
%End

    QgsMeshEditingError removeFaces( const QList<int> &facesToRemove );
%Docstring
Removes faces ``faces`` to the mesh, returns topological errors if this operation fails (operation is not realized)
%End

    int addPointsAsVertices( const QVector<QgsPoint> &point, double tolerance );
%Docstring
Adds points as vertices in triangular mesh coordinate in the mesh. Vertex is effectivly added if the transform
from triangular coordinate to layer coordinate succeeds or if any vertices are next the added vertex (under ``tolerance`` distance).
The method returns the number of vertices effectivly added.

.. note::

   this operation remove including face if exists and replace it by new faces surrounding the vertex
   if the mesh hasn't topological error before this operation, the toological operation always succeed
%End

    QgsMeshEditingError removeVertices( const QList<int> &verticesToRemoveIndexes, bool fillHoles = false );
%Docstring
Removes vertices with indexes in the list ``verticesToRemoveIndexes`` in the mesh
if ``fillHoles`` is set to ``True``, this operation will fill holes created in the mesh, if not remove the surrounding faces

If removing these vertices leads to a topological errors, the method will return the corresponding error and the operatio is cancelled
%End

    void stopEditing();

  signals:
    void meshEdited();

};


/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/mesh/qgsmesheditor.h                                        *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
